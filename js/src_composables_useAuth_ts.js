"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwsd04"] = self["webpackChunkwsd04"] || []).push([["src_composables_useAuth_ts"],{

/***/ "./src/composables/useAuth.ts":
/*!************************************!*\
  !*** ./src/composables/useAuth.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAuth: function() { return /* binding */ useAuth; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ \"./node_modules/core-js/modules/es.array.push.js\");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_esnext_iterator_constructor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/esnext.iterator.constructor.js */ \"./node_modules/core-js/modules/esnext.iterator.constructor.js\");\n/* harmony import */ var core_js_modules_esnext_iterator_constructor_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_iterator_constructor_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_esnext_iterator_find_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/esnext.iterator.find.js */ \"./node_modules/core-js/modules/esnext.iterator.find.js\");\n/* harmony import */ var core_js_modules_esnext_iterator_find_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_iterator_find_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_esnext_iterator_some_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/esnext.iterator.some.js */ \"./node_modules/core-js/modules/esnext.iterator.some.js\");\n/* harmony import */ var core_js_modules_esnext_iterator_some_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_esnext_iterator_some_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/* harmony import */ var _useValidation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./useValidation */ \"./src/composables/useValidation.ts\");\n/* harmony import */ var vue_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! vue-router */ \"./node_modules/vue-router/dist/vue-router.mjs\");\n/* harmony import */ var _services_kakaoAuth_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/services/kakaoAuth.js */ \"./src/services/kakaoAuth.js\");\n\n\n\n\n// src/composables/useAuth.ts\n\n\n\n\nconst useAuth = () => {\n  const router = (0,vue_router__WEBPACK_IMPORTED_MODULE_7__.useRouter)();\n  const {\n    validateLoginForm,\n    validateRegisterForm\n  } = (0,_useValidation__WEBPACK_IMPORTED_MODULE_5__.useValidation)();\n  const currentUser = (0,vue__WEBPACK_IMPORTED_MODULE_4__.ref)(null);\n  const kakaoUserInfo = (0,vue__WEBPACK_IMPORTED_MODULE_4__.ref)(null);\n  const isScrolled = (0,vue__WEBPACK_IMPORTED_MODULE_4__.ref)(false);\n  const isMobileMenuOpen = (0,vue__WEBPACK_IMPORTED_MODULE_4__.ref)(false);\n  const loading = (0,vue__WEBPACK_IMPORTED_MODULE_4__.ref)(false);\n  const error = (0,vue__WEBPACK_IMPORTED_MODULE_4__.ref)(null);\n  const isLoggedIn = (0,vue__WEBPACK_IMPORTED_MODULE_4__.computed)(() => {\n    return currentUser.value !== null;\n  });\n  // localStorage 안전하게 사용하는 유틸리티 함수\n  const safeSetItem = (key, value) => {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(`Error writing ${key} to localStorage:`, error);\n    }\n  };\n  // TMDB API 키 검증\n  const validateTMDbKey = async apiKey => {\n    try {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=ko-KR&page=1`);\n      return response.ok;\n    } catch {\n      return false;\n    }\n  };\n  // API 에러 처리 함수 추가\n  const handleApiError = err => {\n    // 오프라인 상태 체크\n    if (!navigator.onLine) {\n      const message = '인터넷 연결을 확인해주세요.';\n      error.value = message;\n      return {\n        success: false,\n        error: message\n      };\n    }\n    // 타임아웃 에러 체크\n    if (err instanceof Error && err.name === 'TimeoutError') {\n      const message = '서버 응답 시간이 초과되었습니다. 다시 시도해주세요.';\n      error.value = message;\n      return {\n        success: false,\n        error: message\n      };\n    }\n    console.error('API Error:', err);\n    const message = err instanceof Error ? err.message : '서비스 연결에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.';\n    error.value = message;\n    return {\n      success: false,\n      error: message\n    };\n  };\n  const kakaoLogin = async () => {\n    loading.value = true;\n    error.value = null;\n    try {\n      console.log('카카오 로그인 시작');\n      const authResponse = await _services_kakaoAuth_js__WEBPACK_IMPORTED_MODULE_6__.kakaoAuth.login();\n      console.log('카카오 인증 응답:', authResponse);\n      if (!authResponse) {\n        throw new Error('카카오 로그인 인증 실패');\n      }\n      const userInfo = await _services_kakaoAuth_js__WEBPACK_IMPORTED_MODULE_6__.kakaoAuth.getProfile();\n      console.log('카카오 프로필 응답:', userInfo);\n      if (!userInfo || !userInfo.properties || !userInfo.properties.nickname) {\n        throw new Error('카카오 프로필 정보가 올바르지 않습니다.');\n      }\n      // 닉네임이 있는지 한번 더 확인\n      const nickname = userInfo.properties.nickname.trim();\n      if (!nickname) {\n        throw new Error('카카오 닉네임을 가져올 수 없습니다.');\n      }\n      if (!userInfo || !userInfo.properties || !userInfo.properties.nickname) {\n        throw new Error('카카오 사용자 정보를 가져올 수 없습니다');\n      }\n      const validatedUser = userInfo;\n      // 프로필 정보 저장\n      kakaoUserInfo.value = validatedUser;\n      currentUser.value = nickname;\n      // localStorage에도 저장\n      safeSetItem('kakaoUser', userInfo);\n      safeSetItem('currentUser', nickname);\n      // properties에서 직접 접근\n      currentUser.value = validatedUser.properties.nickname;\n      console.log('카카오 로그인 사용자 정보:', {\n        ID: userInfo.id,\n        닉네임: nickname,\n        프로필사진: userInfo.properties.profile_image,\n        연결시간: userInfo.connected_at,\n        계정정보: validatedUser.kakao_account\n      });\n      router.push('/');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Kakao login error:', error);\n      const errorMessage = error instanceof Error ? error.message : '카카오 로그인 중 오류 발생';\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      loading.value = false;\n    }\n  };\n  const register = async form => {\n    try {\n      const validation = validateRegisterForm(form);\n      if (!validation.isValid) {\n        return {\n          success: false,\n          error: validation.error\n        };\n      }\n      const isValidKey = await validateTMDbKey(form.password);\n      if (!isValidKey) {\n        return {\n          success: false,\n          error: '유효하지 않은 TMDB API 키입니다.'\n        };\n      }\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      if (users.some(user => user.id === form.email)) {\n        return {\n          success: false,\n          error: '이미 등록된 이메일입니다.'\n        };\n      }\n      users.push({\n        id: form.email,\n        password: form.password\n      });\n      localStorage.setItem('users', JSON.stringify(users));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Register error:', error);\n      return {\n        success: false,\n        error: '회원가입 중 오류가 발생했습니다.'\n      };\n    }\n  };\n  const login = async form => {\n    try {\n      const validation = validateLoginForm(form);\n      if (!validation.isValid) {\n        return {\n          success: false,\n          error: validation.error\n        };\n      }\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const user = users.find(u => u.id === form.email && u.password === form.password);\n      if (!user) {\n        return {\n          success: false,\n          error: '이메일 또는 비밀번호가 일치하지 않습니다.'\n        };\n      }\n      const isValidKey = await validateTMDbKey(form.password);\n      if (!isValidKey) {\n        return {\n          success: false,\n          error: '유효하지 않은 TMDB API 키입니다.'\n        };\n      }\n      localStorage.setItem('TMDb-Key', form.password);\n      localStorage.setItem('currentUser', form.email);\n      if (form.rememberMe) {\n        localStorage.setItem('keepLoggedIn', 'true');\n      }\n      currentUser.value = form.email;\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: '로그인 중 오류가 발생했습니다.'\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      if (window.Kakao?.Auth?.getAccessToken()) {\n        await window.Kakao.Auth.logout();\n      }\n      currentUser.value = null;\n      kakaoUserInfo.value = null;\n      localStorage.removeItem('kakaoUser');\n      localStorage.removeItem('TMDb-Key');\n      localStorage.removeItem('currentUser');\n      localStorage.removeItem('keepLoggedIn');\n      isMobileMenuOpen.value = false;\n      router.push('/signin');\n    } catch (error) {\n      console.error('Logout error:', error);\n      handleApiError(error);\n      throw error;\n    }\n  };\n  const checkAuth = async () => {\n    try {\n      // 카카오 로그인 체크\n      const savedKakaoUser = localStorage.getItem('kakaoUser');\n      console.log('savedKakaoUser:', savedKakaoUser);\n      if (window.Kakao?.Auth?.getAccessToken()) {\n        try {\n          const userInfo = await _services_kakaoAuth_js__WEBPACK_IMPORTED_MODULE_6__.kakaoAuth.getProfile();\n          console.log('Fresh profile info:', userInfo);\n          const kakaoUserInfo = userInfo;\n          if (userInfo?.properties?.nickname) {\n            // 타입 캐스팅과 함께 필수 필드 확인\n            const validatedUser = {\n              id: userInfo.id,\n              connected_at: userInfo.connected_at,\n              properties: {\n                nickname: userInfo.properties.nickname,\n                profile_image: userInfo.properties.profile_image\n              },\n              kakao_account: {\n                profile_nickname_needs_agreement: false,\n                profile_image_needs_agreement: false,\n                profile: {\n                  nickname: kakaoUserInfo.properties.nickname,\n                  profile_image_url: kakaoUserInfo.properties.profile_image || '',\n                  thumbnail_image_url: kakaoUserInfo.properties.thumbnail_image || ''\n                },\n                email: kakaoUserInfo.kakao_account?.email || ''\n              }\n            };\n            kakaoUserInfo.value = validatedUser;\n            currentUser.value = validatedUser.properties.nickname;\n            // localStorage에 저장\n            safeSetItem('kakaoUser', validatedUser);\n            safeSetItem('currentUser', validatedUser.properties.nickname);\n            console.log('Updated current user:', currentUser.value);\n            return true;\n          }\n        } catch (error) {\n          console.error('Failed to fetch profile:', error);\n          await logout();\n        }\n      } else if (savedKakaoUser) {\n        console.log('Token missing but saved user exists, logging out');\n        await logout();\n      }\n      // 일반 로그인 체크\n      const savedUser = localStorage.getItem('currentUser');\n      const keepLoggedIn = localStorage.getItem('keepLoggedIn');\n      if (savedUser && keepLoggedIn === 'true') {\n        currentUser.value = savedUser;\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Auth check error:', error);\n      return false;\n    }\n  };\n  const handleScroll = () => {\n    isScrolled.value = window.scrollY > 50;\n  };\n  const toggleMobileMenu = () => {\n    isMobileMenuOpen.value = !isMobileMenuOpen.value;\n  };\n  const closeMobileMenu = () => {\n    isMobileMenuOpen.value = false;\n  };\n  const menuItems = [{\n    name: '홈',\n    path: '/'\n  }, {\n    name: '대세 콘텐츠',\n    path: '/popular'\n  }, {\n    name: '찾아보기',\n    path: '/search'\n  }, {\n    name: '내가 찜한 콘텐츠',\n    path: '/wishlist'\n  }];\n  const requireAuth = () => {\n    return isLoggedIn.value;\n  };\n  return {\n    currentUser,\n    kakaoUserInfo,\n    isLoggedIn,\n    loading,\n    error,\n    login,\n    register,\n    kakaoLogin,\n    logout,\n    checkAuth,\n    requireAuth,\n    isScrolled,\n    isMobileMenuOpen,\n    handleScroll,\n    toggleMobileMenu,\n    closeMobileMenu,\n    menuItems\n  };\n};\n\n//# sourceURL=webpack://wsd04/./src/composables/useAuth.ts?");

/***/ }),

/***/ "./src/composables/useValidation.ts":
/*!******************************************!*\
  !*** ./src/composables/useValidation.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useValidation: function() { return /* binding */ useValidation; }\n/* harmony export */ });\nconst useValidation = () => {\n  const validateEmail = email => {\n    if (!email) {\n      return {\n        isValid: false,\n        error: '이메일을 입력해주세요.'\n      };\n    }\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return {\n        isValid: false,\n        error: '유효한 이메일 형식이 아닙니다.'\n      };\n    }\n    return {\n      isValid: true\n    };\n  };\n  const validatePassword = password => {\n    if (!password) {\n      return {\n        isValid: false,\n        error: '비밀번호를 입력해주세요.'\n      };\n    }\n    // TMDB API 키는 보통 32자리 문자열입니다\n    if (password.length < 20) {\n      return {\n        isValid: false,\n        error: '유효한 TMDB API 키를 입력해주세요.'\n      };\n    }\n    return {\n      isValid: true\n    };\n  };\n  const validatePasswordConfirm = (password, confirmPassword) => {\n    if (!confirmPassword) {\n      return {\n        isValid: false,\n        error: '비밀번호 확인을 입력해주세요.'\n      };\n    }\n    if (password !== confirmPassword) {\n      return {\n        isValid: false,\n        error: '비밀번호가 일치하지 않습니다.'\n      };\n    }\n    return {\n      isValid: true\n    };\n  };\n  const validateAgreement = agreed => {\n    if (!agreed) {\n      return {\n        isValid: false,\n        error: '이용약관에 동의해주세요.'\n      };\n    }\n    return {\n      isValid: true\n    };\n  };\n  const validateLoginForm = form => {\n    const emailValidation = validateEmail(form.email);\n    if (!emailValidation.isValid) return emailValidation;\n    const passwordValidation = validatePassword(form.password);\n    if (!passwordValidation.isValid) return passwordValidation;\n    return {\n      isValid: true\n    };\n  };\n  const validateRegisterForm = form => {\n    const emailValidation = validateEmail(form.email);\n    if (!emailValidation.isValid) return emailValidation;\n    const passwordValidation = validatePassword(form.password);\n    if (!passwordValidation.isValid) return passwordValidation;\n    const confirmValidation = validatePasswordConfirm(form.password, form.confirmPassword);\n    if (!confirmValidation.isValid) return confirmValidation;\n    const agreementValidation = validateAgreement(form.agreement);\n    if (!agreementValidation.isValid) return agreementValidation;\n    return {\n      isValid: true\n    };\n  };\n  return {\n    validateEmail,\n    validatePassword,\n    validatePasswordConfirm,\n    validateAgreement,\n    validateLoginForm,\n    validateRegisterForm\n  };\n};\n\n//# sourceURL=webpack://wsd04/./src/composables/useValidation.ts?");

/***/ }),

/***/ "./src/services/kakaoAuth.js":
/*!***********************************!*\
  !*** ./src/services/kakaoAuth.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   kakaoAuth: function() { return /* binding */ kakaoAuth; }\n/* harmony export */ });\n// src/services/kakaoAuth.js\nconst kakaoAuth = {\n  init() {\n    try {\n      // Kakao SDK가 로드되었는지 확인\n      if (!window.Kakao) {\n        console.error('Kakao SDK not loaded');\n        return false;\n      }\n\n      // 이미 초기화되었는지 확인\n      if (!window.Kakao.isInitialized()) {\n        const kakaoClientId = /* unsupported import.meta.env.VUE_APP_KAKAO_CLIENT_ID */ undefined.VUE_APP_KAKAO_CLIENT_ID;\n        if (!kakaoClientId) {\n          console.error('Kakao Client ID not found in environment variables');\n          return false;\n        }\n        window.Kakao.init(kakaoClientId);\n        console.log('Kakao SDK initialized');\n      }\n      return true;\n    } catch (error) {\n      console.error('Kakao init error:', error);\n      return false;\n    }\n  },\n  async login() {\n    if (!this.init()) {\n      throw new Error('Kakao SDK initialization failed');\n    }\n    try {\n      const authObj = await new Promise((resolve, reject) => {\n        window.Kakao.Auth.login({\n          success: async response => {\n            console.log('Login success:', response);\n            // 로그인 성공 직후 프로필 정보 가져오기\n            try {\n              const profileData = await this.getProfile();\n              resolve({\n                auth: response,\n                profile: profileData\n              });\n            } catch (profileError) {\n              reject(new Error('프로필 정보 조회 실패: ' + profileError.message));\n            }\n          },\n          fail: err => {\n            console.error('Login failed:', err);\n            reject(new Error(err.message || '카카오 로그인 실패'));\n          },\n          scope: 'profile_nickname, profile_image'\n        });\n      });\n      return authObj;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  async getProfile() {\n    if (!window.Kakao?.Auth?.getAccessToken()) {\n      throw new Error('로그인이 필요합니다');\n    }\n    try {\n      const response = await window.Kakao.API.request({\n        url: '/v2/user/me'\n      });\n      console.log('Raw profile response:', response); // 디버깅용\n\n      // 응답 구조 확인 및 필수 필드 검증\n      if (!response || typeof response !== 'object') {\n        throw new Error('Invalid response format');\n      }\n\n      // properties가 존재하고 nickname이 있는지 확인\n      if (!response.properties || !response.properties.nickname) {\n        console.error('Properties or nickname missing:', response);\n        throw new Error('프로필 정보가 불완전합니다');\n      }\n      return {\n        id: response.id,\n        connected_at: response.connected_at,\n        properties: {\n          nickname: response.properties.nickname,\n          profile_image: response.properties.profile_image\n        },\n        kakao_account: response.kakao_account\n      };\n    } catch (error) {\n      console.error('Get profile error:', error);\n      throw error;\n    }\n  },\n  async logout() {\n    if (!window.Kakao?.Auth?.getAccessToken()) {\n      return;\n    }\n    try {\n      await window.Kakao.Auth.logout();\n      console.log('Logged out successfully');\n    } catch (error) {\n      console.error('Logout error:', error);\n      throw error;\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (kakaoAuth);\n\n//# sourceURL=webpack://wsd04/./src/services/kakaoAuth.js?");

/***/ })

}]);